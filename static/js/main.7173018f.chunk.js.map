{"version":3,"sources":["config/app.config.ts","graphql/index.ts","components/layout/Layout.style.tsx","components/layout/Layout.tsx","components/styled/Lib.tsx","components/infoRow/InfoRow.style.tsx","components/infoRow/InfoRow.tsx","components/personDetail/PersonDetail.style.tsx","components/personDetail/PersonDetail.tsx","components/personList/PersonList.style.tsx","components/personItem/PersonItem.style.tsx","components/personItem/PersonItem.tsx","components/loadingIndicator/LoadingIndicator.style.tsx","components/loadingIndicator/LoadingIndicator.tsx","components/errorCell/ErrorCell.style.tsx","components/errorCell/ErrorCell.tsx","components/personList/PersonList.tsx","graphql/queries.ts","hooks/usePeopleQuery.ts","hooks/useRefState.ts","components/emptyDetail/EmptyDetail.style.tsx","components/emptyDetail/EmptyDetail.tsx","pages/StarWars.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["APP_CONFIG","apiUrl","process","graphql","pageSize","Number","queryDelay","graphqlClient","ApolloClient","uri","cache","InMemoryCache","PageHeader","styled","header","HeaderTitle","div","PageContent","Layout","props","children","LowEmphasis","p","H2","h2","H2HigEmphasis","H2LowEmphasis","InfoItem","InfoRow","label","value","PersonDetailWrapper","PersonDetailContent","SectionTitle","PersonDetail","person","className","eyeColor","hairColor","skinColor","birthYear","vehicles","map","v","index","key","name","PersonListContent","PersonCell","PersonCellBottomBorder","PersonCellContent","PersonCellInfo","PersonCellArrow","ArrowIcon","span","PersonItem","onClick","species","s","filter","x","join","homeworld","defaultProps","rotate","keyframes","LoadingIndicatorCell","LoadingIndicatorContent","LoadingIcon","LoadingIndicator","ErrorCellContainer","ErrorCell","PersonList","people","isLoading","hasError","onPersonSelected","id","FETCH_PEOPLE_PAGE","gql","itemsPerPage","delayQuery","usePeopleQuery","client","useApolloClient","initialValue","useState","state","setState","stateRef","useRef","useEffect","current","useRefState","data","dataRef","setData","loading","setLoading","setHasError","runQuery","limit","offset","a","queryResult","query","variables","console","error","hadError","dataLength","allPeople","length","itemCount","paginationInfo","count","newOffset","newLimit","setTimeout","EmptyDetailWrapper","EmptyDetailContent","EmptyDetailImage","EmptyDetailTitle","EmptyDetail","StarWars","setPerson","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7173018f.chunk.js","sourcesContent":["export const APP_CONFIG = {\r\n  apiUrl: process.env.REACT_APP_API_URL,\r\n  graphql: {\r\n    pageSize: Number(process.env.REACT_APP_ITEMS_PER_PAGE || 10),\r\n    queryDelay: Number(process.env.REACT_APP_QUERY_DELAY || 500),\r\n  },\r\n};\r\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { APP_CONFIG } from '../config/app.config';\r\n\r\nexport const graphqlClient = new ApolloClient({\r\n  uri: APP_CONFIG.apiUrl,\r\n  cache: new InMemoryCache(),\r\n});\r\n","import styled from 'styled-components';\r\n\r\nexport const PageHeader = styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-left: 33px;\r\n  width: 100%;\r\n  height: var(--header-height);\r\n  background: var(--color-ravn-black);\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.25);\r\n`;\r\n\r\nexport const HeaderTitle = styled.div`\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 17px;\r\n  line-height: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: 0.0125em;\r\n  color: var(--color-gray-6);\r\n`;\r\n\r\nexport const PageContent = styled.div`\r\n  display: flex;\r\n  height: calc(100% - var(--header-height));\r\n  width: 100%;\r\n`;\r\n","import React from 'react';\r\nimport { PageHeader, HeaderTitle, PageContent } from './Layout.style';\r\n\r\nexport const Layout: React.SFC<{}> = (props) => (\r\n  <>\r\n    <PageHeader>\r\n      <HeaderTitle>Ravn Star Wars Registry</HeaderTitle>\r\n    </PageHeader>\r\n\r\n    <PageContent>{props.children}</PageContent>\r\n  </>\r\n);\r\n","import styled from 'styled-components';\r\n\r\nexport const LowEmphasis = styled.p`\r\n  color: var(--color-text-light);\r\n`;\r\n\r\nexport const H2 = styled.h2`\r\n  font-family: 'Source Sans Pro';\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 17px;\r\n  line-height: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: 0.0125em;\r\n  color: var(--color-text-dark);\r\n  margin: 0;\r\n`;\r\n\r\nexport const H2HigEmphasis = styled(H2)`\r\n  color: var(--color-text-emphasis);\r\n`;\r\n\r\nexport const H2LowEmphasis = styled(H2)`\r\n  color: var(--color-text-light);\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const InfoItem = styled.div`\r\n  height: 48px;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n`;\r\n","import React from 'react';\r\nimport { H2, H2LowEmphasis } from '../styled/Lib';\r\nimport { InfoItem } from './InfoRow.style';\r\n\r\ninterface InfoRowProps {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nexport const InfoRow: React.SFC<InfoRowProps> = ({ label, value }) => (\r\n  <InfoItem>\r\n    <H2LowEmphasis>{label}</H2LowEmphasis>\r\n    <H2>{value}</H2>\r\n  </InfoItem>\r\n);\r\n","import styled from 'styled-components';\r\nimport { H2 } from '../styled/Lib';\r\n\r\nexport const PersonDetailWrapper = styled.div`\r\n  display: flex;\r\n  flex-grow: 1;\r\n  padding: 0px 100px;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const PersonDetailContent = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nexport const SectionTitle = styled(H2)`\r\n  margin-bottom: 8px;\r\n  margin-top: 32px;\r\n`;\r\n","import React from 'react';\r\nimport { Person } from '../../interfaces/person.interface';\r\nimport { InfoRow } from '../infoRow/InfoRow';\r\nimport {\r\n  PersonDetailContent,\r\n  PersonDetailWrapper,\r\n  SectionTitle,\r\n} from './PersonDetail.style';\r\n\r\nexport const PersonDetail: React.SFC<{ person: Person }> = ({ person }) => {\r\n  return (\r\n    <PersonDetailWrapper>\r\n      <PersonDetailContent>\r\n        <SectionTitle>General Information</SectionTitle>\r\n        <div className=\"person-detail__info\">\r\n          <InfoRow label=\"Eye Color\" value={person.eyeColor}></InfoRow>\r\n          <InfoRow label=\"Hair Color\" value={person.hairColor}></InfoRow>\r\n          <InfoRow label=\"Skin Color\" value={person.skinColor}></InfoRow>\r\n          <InfoRow label=\"Birth Year\" value={person.birthYear}></InfoRow>\r\n        </div>\r\n        <SectionTitle>Vehicles</SectionTitle>\r\n        <div className=\"person-detail__info\">\r\n          {person.vehicles.map((v, index) => (\r\n            <InfoRow key={index} label={v.name} value=\"\"></InfoRow>\r\n          ))}\r\n        </div>\r\n      </PersonDetailContent>\r\n    </PersonDetailWrapper>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const PersonListContent = styled.div`\r\n  width: 350px;\r\n  height: calc(100vh - 52px);\r\n  overflow-y: auto;\r\n  background: #ffffff;\r\n  box-shadow: 1px 0px 0px rgba(0, 0, 0, 0.15);\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const PersonCell = styled.div`\r\n  width: 100%;\r\n  height: 69px;\r\n  padding-left: 16px;\r\n`;\r\n\r\nexport const PersonCellBottomBorder = styled.div`\r\n  width: 100%;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nexport const PersonCellContent = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n`;\r\n\r\nexport const PersonCellInfo = styled.div`\r\n  flex-grow: 1;\r\n`;\r\n\r\nexport const PersonCellArrow = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 16px;\r\n  width: 36px;\r\n`;\r\n\r\nexport const ArrowIcon = styled.span`\r\n  display: inline-block;\r\n  width: 8px;\r\n  height: 12px;\r\n  background-image: url(${`${process.env.PUBLIC_URL}/icons/chevron-right.svg`});\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n`;\r\n","import React from 'react';\r\nimport { Person } from '../../interfaces/person.interface';\r\nimport {\r\n  PersonCell,\r\n  PersonCellContent,\r\n  PersonCellInfo,\r\n  PersonCellArrow,\r\n  ArrowIcon,\r\n  PersonCellBottomBorder,\r\n} from './PersonItem.style';\r\nimport { LowEmphasis, H2 } from '../styled/Lib';\r\nimport { Species } from '../../interfaces/species.interface';\r\n\r\ninterface PersonItemProps {\r\n  person: Person;\r\n  onClick?: () => void;\r\n}\r\n\r\nfunction formatSpecies(species: Species[]) {\r\n  return species\r\n    .map((s) => s?.name)\r\n    .filter((x) => x)\r\n    .join(', ');\r\n}\r\n\r\nexport const PersonItem: React.SFC<PersonItemProps> = ({ person, onClick }) => (\r\n  <PersonCell onClick={onClick}>\r\n    <PersonCellContent>\r\n      <PersonCellInfo>\r\n        <H2>{person.name}</H2>\r\n        <LowEmphasis>\r\n          {formatSpecies(person.species)} from {person.homeworld?.name}\r\n        </LowEmphasis>\r\n      </PersonCellInfo>\r\n      <PersonCellArrow>\r\n        <ArrowIcon></ArrowIcon>\r\n      </PersonCellArrow>\r\n    </PersonCellContent>\r\n    <PersonCellBottomBorder></PersonCellBottomBorder>\r\n  </PersonCell>\r\n);\r\n\r\nPersonItem.defaultProps = {\r\n  onClick: () => {},\r\n};\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\nexport const LoadingIndicatorCell = styled.div`\r\n  width: 100%;\r\n  height: 56px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const LoadingIndicatorContent = styled.div`\r\n  width: 97px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const LoadingIcon = styled.div`\r\n  width: 97px;\r\n  height: 24px;\r\n  background-image: url(${`${process.env.PUBLIC_URL}/icons/loading-icon.svg`});\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  animation: ${rotate} 2s linear infinite;\r\n`;\r\n","import React from 'react';\r\nimport {\r\n  LoadingIndicatorCell,\r\n  LoadingIcon,\r\n  LoadingIndicatorContent,\r\n} from './LoadingIndicator.style';\r\nimport { H2LowEmphasis } from '../styled/Lib';\r\n\r\nexport const LoadingIndicator: React.SFC<{}> = () => (\r\n  <LoadingIndicatorCell>\r\n    <LoadingIndicatorContent>\r\n      <LoadingIcon></LoadingIcon> <H2LowEmphasis>Loading</H2LowEmphasis>\r\n    </LoadingIndicatorContent>\r\n  </LoadingIndicatorCell>\r\n);\r\n","import styled from 'styled-components';\r\n\r\nexport const ErrorCellContainer = styled.div`\r\n  width: 100%;\r\n  height: 52px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import React from 'react';\r\nimport { H2HigEmphasis } from '../styled/Lib';\r\nimport { ErrorCellContainer } from './ErrorCell.style';\r\n\r\nexport const ErrorCell: React.SFC<{}> = () => (\r\n  <ErrorCellContainer>\r\n    <H2HigEmphasis>Failed to Load Data</H2HigEmphasis>\r\n  </ErrorCellContainer>\r\n);\r\n","import React from 'react';\r\nimport { PersonListContent } from './PersonList.style';\r\nimport { Person } from '../../interfaces/person.interface';\r\nimport { PersonItem } from '../personItem/PersonItem';\r\nimport { LoadingIndicator } from '../loadingIndicator/LoadingIndicator';\r\nimport { ErrorCell } from '../errorCell/ErrorCell';\r\n\r\ninterface PersonListProps {\r\n  people: Person[];\r\n  isLoading: boolean;\r\n  hasError: boolean;\r\n  onPersonSelected?: (person: Person) => void;\r\n}\r\n\r\nexport const PersonList: React.SFC<PersonListProps> = ({\r\n  people,\r\n  isLoading,\r\n  hasError,\r\n  onPersonSelected,\r\n}) => (\r\n  <PersonListContent>\r\n    {people.map((p) => (\r\n      <PersonItem\r\n        key={p.id}\r\n        person={p}\r\n        onClick={() => onPersonSelected?.(p)}></PersonItem>\r\n    ))}\r\n\r\n    {isLoading && <LoadingIndicator></LoadingIndicator>}\r\n\r\n    {hasError && <ErrorCell></ErrorCell>}\r\n  </PersonListContent>\r\n);\r\n\r\nPersonList.defaultProps = {\r\n  onPersonSelected: (person) => {},\r\n};\r\n","import { gql } from '@apollo/client';\r\nimport { Person } from '../interfaces/person.interface';\r\n\r\nexport interface FetchPeoplePageData {\r\n  allPeople: Person[];\r\n  paginationInfo: {\r\n    count: number;\r\n  };\r\n}\r\n\r\nexport interface PageVariables {\r\n  limit: number;\r\n  offset: number;\r\n}\r\n\r\nexport const FETCH_PEOPLE_PAGE = gql`\r\n  query FetchPeoplePage($limit: Int!, $offset: Int!) {\r\n    allPeople: allPersons(first: $limit, skip: $offset) {\r\n      id\r\n      birthYear\r\n      name\r\n      gender\r\n      height\r\n      hairColor\r\n      eyeColor\r\n      skinColor\r\n      homeworld {\r\n        name\r\n      }\r\n      species {\r\n        name\r\n      }\r\n      vehicles {\r\n        name\r\n      }\r\n    }\r\n    paginationInfo: _allPersonsMeta {\r\n      count\r\n    }\r\n  }\r\n`;\r\n","import { useApolloClient, ApolloQueryResult } from '@apollo/client';\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  FetchPeoplePageData,\r\n  FETCH_PEOPLE_PAGE,\r\n  PageVariables,\r\n} from '../graphql/queries';\r\nimport { Person } from '../interfaces/person.interface';\r\nimport { useRefState } from './useRefState';\r\nimport { APP_CONFIG } from '../config/app.config';\r\n\r\nconst itemsPerPage = APP_CONFIG.graphql.pageSize;\r\nconst delayQuery = APP_CONFIG.graphql.queryDelay;\r\n\r\nexport const usePeopleQuery = () => {\r\n  const client = useApolloClient();\r\n  const [data, dataRef, setData] = useRefState<Person[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [hasError, setHasError] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    async function runQuery(limit: number, offset: number) {\r\n      setLoading(true);\r\n      setHasError(false);\r\n\r\n      let queryResult: ApolloQueryResult<FetchPeoplePageData> | null = null;\r\n      try {\r\n        queryResult = await client.query<FetchPeoplePageData, PageVariables>({\r\n          query: FETCH_PEOPLE_PAGE,\r\n          variables: {\r\n            limit: limit,\r\n            offset: offset,\r\n          },\r\n        });\r\n      } catch (err) {\r\n        console.error(err);\r\n        setLoading(false);\r\n        setHasError(true);\r\n      }\r\n\r\n      if (!queryResult) {\r\n        setLoading(false);\r\n        setHasError(true);\r\n        return;\r\n      }\r\n\r\n      const hadError = !!queryResult.error;\r\n      // Reset the loading state.\r\n      setLoading(false);\r\n      setHasError(hadError);\r\n      const dataLength = queryResult.data?.allPeople?.length || 0;\r\n      if (!hadError && dataLength > 0) {\r\n        setData([...dataRef.current, ...queryResult.data!.allPeople]);\r\n        const itemCount = queryResult.data!.paginationInfo.count;\r\n        const newLimit = itemsPerPage;\r\n        const newOffset = offset + itemsPerPage;\r\n\r\n        if (newOffset - newLimit >= itemCount) return;\r\n\r\n        setTimeout(() => {\r\n          runQuery(newLimit, newOffset);\r\n        }, delayQuery);\r\n      }\r\n    }\r\n    runQuery(itemsPerPage, 0);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return {\r\n    loading,\r\n    data,\r\n    hasError,\r\n  };\r\n};\r\n","import {\r\n  Dispatch,\r\n  MutableRefObject,\r\n  SetStateAction,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\n\r\nexport type UseRefReturnValue<T> = [\r\n  T,\r\n  MutableRefObject<T>,\r\n  Dispatch<SetStateAction<T>>\r\n];\r\n\r\nexport const useRefState = <T>(initialValue: T): UseRefReturnValue<T> => {\r\n  const [state, setState] = useState<T>(initialValue);\r\n  const stateRef = useRef(state);\r\n  useEffect(() => {\r\n    stateRef.current = state;\r\n  }, [state]);\r\n  return [state, stateRef, setState];\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const EmptyDetailWrapper = styled.div`\r\n  padding: 0px 100px;\r\n  display: flex;\r\n  flex-grow: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const EmptyDetailContent = styled.div`\r\n  height: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const EmptyDetailImage = styled.div`\r\n  height: 120px;\r\n  width: 120px;\r\n  background-image: url(${`${process.env.PUBLIC_URL}/images/bb8.png`});\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n`;\r\n\r\nexport const EmptyDetailTitle = styled.div`\r\n  font-family: 'STARWARS';\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  letter-spacing: 0.0125em;\r\n  color: var(--color-black);\r\n`;\r\n","import React from 'react';\r\nimport {\r\n  EmptyDetailWrapper,\r\n  EmptyDetailImage,\r\n  EmptyDetailTitle,\r\n  EmptyDetailContent,\r\n} from './EmptyDetail.style';\r\n\r\nexport const EmptyDetail: React.SFC<{}> = () => (\r\n  <EmptyDetailWrapper>\r\n    <EmptyDetailContent>\r\n      <EmptyDetailTitle>SELECT A CHARACTER</EmptyDetailTitle>\r\n      <EmptyDetailImage></EmptyDetailImage>\r\n    </EmptyDetailContent>\r\n  </EmptyDetailWrapper>\r\n);\r\n","import React, { useState } from 'react';\r\nimport { Layout } from '../components/layout/Layout';\r\nimport { PersonDetail } from '../components/personDetail/PersonDetail';\r\nimport { PersonList } from '../components/personList/PersonList';\r\nimport { usePeopleQuery } from '../hooks/usePeopleQuery';\r\nimport { Person } from '../interfaces/person.interface';\r\nimport { EmptyDetail } from '../components/emptyDetail/EmptyDetail';\r\n\r\nexport const StarWars = () => {\r\n  const [person, setPerson] = useState<Person | null>(null);\r\n  const { data, loading, hasError } = usePeopleQuery();\r\n\r\n  return (\r\n    <Layout>\r\n      <PersonList\r\n        people={data}\r\n        isLoading={loading}\r\n        hasError={hasError}\r\n        onPersonSelected={setPerson}></PersonList>\r\n      {person ? (\r\n        <PersonDetail person={person}></PersonDetail>\r\n      ) : (\r\n        <EmptyDetail></EmptyDetail>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n","import { ApolloProvider } from '@apollo/client';\r\nimport React from 'react';\r\nimport './App.css';\r\nimport { graphqlClient } from './graphql';\r\nimport { StarWars } from './pages/StarWars';\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={graphqlClient}>\r\n      <StarWars></StarWars>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}